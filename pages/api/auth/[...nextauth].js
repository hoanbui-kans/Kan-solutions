import NextAuth from "next-auth"
import FacebookProvider from 'next-auth/providers/facebook'
import GoogleProvider from 'next-auth/providers/google'
import axios from "axios"
import CredentialsProvider from "next-auth/providers/credentials";
import { OAuth2Client } from 'google-auth-library';
const rootURL = process.env.NEXT_PUBLIC_WP_JSON;

// This is an instance of a google client that we need to ask google informations about the user
const googleAuthClient = new OAuth2Client(process.env.NEXT_PUBLIC_GOOGLE_ID);

const options = {
  secret: process.env.SECRET,
  session: {
    jwt: true,
    maxAge: 30 * 24 * 60 * 60,
  },
  providers: [
    // OAuth authentication providers
    FacebookProvider({
      clientId: process.env.FACEBOOK_ID,
      clientSecret: process.env.FACEBOOK_SECRET
    }),
    GoogleProvider({
      clientId: process.env.NEXT_PUBLIC_GOOGLE_ID,
      clientSecret: process.env.GOOGLE_SECRET
    }),
    CredentialsProvider({
      // The name to display on the sign in form (e.g. "Sign in with...")
      name: "Credentials",
      // The credentials is used to generate a suitable form on the sign in page.
      // You can specify whatever fields you are expecting to be submitted.
      // e.g. domain, username, password, 2FA token, etc.
      // You can pass any HTML attribute to the <input> tag through the object.
      credentials: {
        username: { label: "Tài khoản", type: "text", placeholder: "Tên đăng nhập" },
        password: {  label: "Mật khẩu", type: "password" }
      },
      async authorize(credentials, req) {
        const config = {
          method: 'post',
          url: rootURL + 'jwt-auth/v1/token',
          data : {
            password: credentials.password,
            username: credentials.username
          },
        };
        const user_res = await axios(config)
        .then(function (response) {
            return response.data;
        })
        .catch(function (error) {
          console.log(error);
        });

        if (user_res) {
          return user_res
        } else {
          return null
        }
      }
    }),
    CredentialsProvider({
      // The id of this credential provider. It's important to give an id because, in frontend we don't want to
      // show anything about this provider in a normal login flow
      id: 'googleonetap',
      // A readable name
      name: 'google-one-tap',

      // This field define what parameter we expect from the FE and what's its name. In this case "credential"
      // This field will contain the token generated by google
      credentials: {
        credential: { type: 'text' },
      },
      // This where all the logic goes
      authorize: async (credentials) => {
        console.log(credentials);
        // The token given by google and provided from the frontend
        const token = credentials.credential;
 
        // We use the google library to exchange the token with some information about the user
        const ticket = await googleAuthClient.verifyIdToken({
          // The token received from the interface
          idToken: token,
          // This is the google ID of your application
          audience: process.env.NEXT_PUBLIC_GOOGLE_ID,
        });

        const payload = ticket.getPayload(); // This is the user

        if (!payload) {
          throw new Error('Cannot extract payload from signin token');
        }

        // Check out the jwt https://next-auth.js.org/configuration/callbacks#jwt-callback
        // and session https://next-auth.js.org/configuration/callbacks#session-callback callbacks
        // to see how to store the user in the session.
        // We return the retrieved user

        let data_onetap = {     
          'user_email' : payload.email,
          'fullname': payload.name,
          'first_name' : payload.given_name,
          'last_name' : payload.family_name,
          'picture' : payload.picture,
          'provider' : 'google',
        };

        const config_onetap = {
          method: 'post',
          url: rootURL + 'jwt-auth/v1/token/validate_social_user',
          data : data_onetap,
        };
        
        const response_onetap = await axios(config_onetap)
          .then(function (response) {
              return response.data;
          })
          .catch(function (error) {
            console.log('error:', error);
          });
          
          if(!response_onetap){
            return false
          }

        return response_onetap;

      },
    }),
  ],
  callbacks: {
    async signIn({user, account, profile}) {
      const provider = account.provider;
      switch(provider){
        case 'google':
          let data = {     
            'user_id' : user.id,
            'user_email' : user.email,
            'fullname': profile.name,
            'first_name' : profile.given_name,
            'last_name' : profile.family_name,
            'picture' : profile.picture,
            'provider' : provider,
          };
          
          const config = {
            method: 'post',
            url: rootURL + 'jwt-auth/v1/token/validate_social_user',
            data : data,
          };
      
          const response = await axios(config)
            .then(function (response) {
                return response.data;
            })
            .catch(function (error) {
              console.log(error);
            });
    
            if(!response){
              return false
            }
          user.token = {...response};
          return true;
        break;
        case 'facebook':
          let data_fb = {     
            'user_id' : user.id,
            'user_email' : user.email,
            'fullname': profile.name,
            'first_name' : profile.given_name,
            'last_name' : profile.family_name,
            'picture' : profile.picture.data.url,
            'provider' : provider,
          };
          const config_fb = {
            method: 'post',
            url: rootURL + 'jwt-auth/v1/token/validate_social_user',
            data : data_fb,
          };
      
          const response_fb = await axios(config_fb)
            .then(function (response) {
                return response.data;
            })
            .catch(function (error) {
              console.log(error);
            });
            console.log(response_fb);
            if(!response_fb){
              return false
            }
            user.token = {...response_fb};
          return true
        break;
        default:  
        user.token = {...user};
        return true
      }
    },

    async redirect({ account, token , url, baseUrl }) {
      // Allows relative callback URLs
      if (url.startsWith("/dang-nhap/")) {
        const baseUrl = `${baseUrl}${url}`;
        return baseUrl;
      } 
      // Allows callback URLs on the same origin
      else if (new URL(url).origin === baseUrl) return url;
      return baseUrl;
    },
    async jwt({token, user}) {
      user && (token.user = user);
      return token;
    },
    async session({token, session , user, account}){ 
      session.user = token.user;  // Setting token in session
      return session;
    }
  }
}

export default (req, res) => {
  return NextAuth(req, res, options)
}